1. golang type assertion
only interface can call type assertion
type Test struct {
    msg string
}
type PrintInteface interface {
    printInfo()
}

// Test implement interface PrintInteface
func (t Test) printInfo() {
}

func main() {
    var p PrintInteface = Test{}    // receiver is non-pointer
    // var p2 PrintInteface = &Test{} // if receiver is pointer

    // variable *T can call methods where receiver is pointrt or non-pointer
    // variable T can call methods where receiver is only non-pointer

    switch p.(type) {
    // Test or PrintInteface
    case Test:
        a.printMsg()
    }

    // if variable is pointer, switch type case is pointer or interface
    // switch p2.(type) {
    // *Test or PrintInteface
    // case *Test:
    //    a.printMsg()
    // }
}

JVM interpreter execute logic

do {
    atomically calculate pc and fetch opcode at pc;
    if (operands) fetch operands;
    execute the action for the opcode;
} while (there is more to do);


在go语言中，任何类型在声明后没有赋值的情况下，都对应一个零值。

整形如int8、byte、int16、uint、uintprt等，默认值为0。
浮点类型如float32、float64，默认值为0。
布尔类型bool的默认值为false。
复数类型如complex64、complex128，默认值为0+0i。
字符串string的默认值为”“。
错误类型error的默认值为nil。
对于一些复合类型，如指针、切片、字典、通道、接口，默认值为nil。而数组的默认值要根据其数据类型来确定。例如：var a [4]int，其默认值为[0 0 0 0]。

golang pointer is a ref type.